1556565683753:{(:a :b) 4 (:a :c) 6 (:b :d) 2 (:d :c) 1 (:d :f) 2\n              (:c :e) 3 (:e :f) 3}
1556565699270:{(:a :b) 4 (:a :c) 6 (:b :d) 2 (:d :c) 1 (:d :f) 2 (:c :e) 3 (:e :f) 3}
1556565719321:{'(:a :b) 4 '(:a :c) 6 '(:b :d) 2 '(:d :c) 1 '(:d :f) 2 '(:c :e) 3 '(:e :f) 3}
1556565779692:(reverse '(:a :b))
1556565823852:(merge-with + {(:a :b) 1 (:c :d) 2} {(:a :b) 1})
1556565834637:(merge-with + {'(:a :b) 1 '(:c :d) 2} {'(:a :b) 1})
1556566554860:(filter (fn [k v] (> v 0))  {'(:a :b) 1 '(:c :d) 2} {'(:a :b) 1})
1556566569009:(filter (fn [k v] (> v 0))  {'(:a :b) 1 '(:c :d) 2})
1556566584720:(filter (fn [[k v]] (> v 0))  {'(:a :b) 1 '(:c :d) 2})
1556566589799:(filter (fn [[k v]] (> v 1))  {'(:a :b) 1 '(:c :d) 2})
1556566597620:(into {} (filter (fn [[k v]] (> v 1))  {'(:a :b) 1 '(:c :d) 2}))
1556567294008:(get {'(:a :b) 1} '(:a :b))
1556567299154:(get {'(:a :b) 1} '(:a :c) 0)
1556570815481:(defn find-a-path [G a b]\n  (loop [x a\n         z []]\n    (let [y (->> (keys G)\n                 (filter #(= x (first %)))\n                 first\n                 second)]\n       (println x)\n       (println z)\n       (println y)\n       (if (or (nil? y) (= y b))\n           (let [tmp (cons [x y] z)\n                 v (->> (map G tmp)\n                        (reduce min))]\n              (into {} (mapcat (fn [x] {x v}) tmp)))\n           (recur y (cons [x y] z))))))
1556570848694:(find-a-path {'(:a :b) 1 '(:b :c) 2} :a :c)
1556570858096:(find-a-path {'(:a :b) 1 '(:b :c) 2} :c :c)
1556570933579:(defn find-a-path [G a b]\n  (loop [x a\n         z []]\n    (let [y (->> (keys G)\n                 (filter #(= x (first %)))\n                 first\n                 second)]\n       (println x)\n       (println z)\n       (println y)\n       (if (or (nil? y) (= y b))\n           (let [v (->> (map G z)\n                        (reduce min))]\n              (into {} (mapcat (fn [x] {x v}) z)))\n           (recur y (cons [x y] z))))))
1556570937023:(find-a-path {'(:a :b) 1 '(:b :c) 2} :c :c)
1556570978768:(min [1 2 3])
1556570984063:(reduce min [1 2 3])
1556570987123:(reduce min [])
1556571041871:(defn find-a-path [G a b]\n  (loop [x a\n         z []]\n    (let [y (->> (keys G)\n                 (filter #(= x (first %)))\n                 first\n                 second)]\n       (println x)\n       (println z)\n       (println y)\n       (if (or (nil? y) (= y b))\n           (let [v (->> (cons 0 (map G z))\n                        (reduce min))]\n              (into {} (mapcat (fn [x] {x v}) z)))\n           (recur y (cons [x y] z))))))
1556571048365:(find-a-path {'(:a :b) 1 '(:b :c) 2} :c :c)
1556571332917:(defn dd [x] (cond [(> x 1) :gt (< x 1) :lt :true :equal))
1556571339525:(defn dd [x] (cond [(> x 1) :gt (< x 1) :lt :true :equal]))
1556571346555:(defn dd [x] (cond (> x 1) :gt (< x 1) :lt :true :equal))
1556571349114:(dd 10)
1556573006113:(filter (fn [[k v]] (= :a (second k))) {[:b :a] 1 [:c :b] 2})
1556573101874:(first {})
1556573154608:(second (first {}))
1556573310377:t
1556613194807:(remove {:a 1 :b 2} {:a 1})
1556613202989:(remove {:a 2 :b 2} {:a 1})
1556613208469:(remove {:a 2 :b 2} :a)
1556613219141:(remove :a {:a 2 :b 2})
1556613225957:(remove {:a 2} {:a 2 :b 2})
1556613269710:(dissoc {:a 2 :b 2} [:a])
1556613302414:(remove {:a 2 :b 2} :a)
1556613315438:(dissoc {:a 2 :b 2} :a)
1556622261199:(nil? :a)
1556622263894:(nil? {})
1556622273160:(nil? (get {} :a))
1556622331595:(zipmap [:a :b :c] (repeat 1))
1556622945070:(map (fn [x] [x (+ x 1 (rand-int 3))]) (range 10))
1556623026213:(mapcat (fn [x] (repeatedly (fn [] [x (+ x 1 (rand-int 3))]) (rand-int 3))) (range 10))
1556623034894:(map (fn [x] (repeatedly (fn [] [x (+ x 1 (rand-int 3))]) (rand-int 3))) (range 10))
1556623075198:(map (fn [x] (repeatedly (rand-int 3) (fn [] [x (+ x 1 (rand-int 3))]))) (range 10))
1556623084038:(map (fn [x] (repeatedly (rand-int 3) (fn [] [x (+ x 1 (rand-int 3))]))) (range 1 10))
1556623091110:(mapcat (fn [x] (repeatedly (rand-int 3) (fn [] [x (+ x 1 (rand-int 3))]))) (range 1 10))
1556623107825:(mapcat (fn [x] (repeatedly (+ 1 (rand-int 3)) (fn [] [x (+ x 1 (rand-int 3))]))) (range 1 10))
1556623140527:(mapcat (fn [x] (repeatedly (+ 3 (rand-int 3)) (fn [] [x (+ x 1 (rand-int 4))]))) (range 1 10))
1556623191124:(distinct (mapcat (fn [x] (repeatedly (+ 3 (rand-int 3)) (fn [] [x (+ x 1 (rand-int 4))]))) (range 1 10)))
1556623235345:(map (fn [x] {x (+ 1 (rand-int 6))}) (distinct (mapcat (fn [x] (repeatedly (+ 3 (rand-int 3)) (fn [] [x (+ x 1 (rand-int 4))]))) (range 1 10))))
1556623241836:(mapcat (fn [x] {x (+ 1 (rand-int 6))}) (distinct (mapcat (fn [x] (repeatedly (+ 3 (rand-int 3)) (fn [] [x (+ x 1 (rand-int 4))]))) (range 1 10))))
1556623252567:(into {} (mapcat (fn [x] {x (+ 1 (rand-int 6))}) (distinct (mapcat (fn [x] (repeatedly (+ 3 (rand-int 3)) (fn [] [x (+ x 1 (rand-int 4))]))) (range 1 10)))))
1556623289988:(into {} (mapcat (fn [x] {x (+ 1 (rand-int 6))}) (distinct (mapcat (fn [x] (repeatedly (+ 3 (rand-int 3)) (fn [] [x (+ x 1 (rand-int 4))]))) (range 10)))))
1556624053298:(with-open [out (clojure.java.io/writer "test")]\n    (.write out "this is a test"))
1556624448815:(format "%s %d\\n" "aaa" 12)
1556624472697:(with-open [out (clojure.java.io/writer "test")]\n    (.write out (format "%s %d\\n" "this is a test" 12)))
1556624524713:(doseq [[i j] [[1 2] [3 4] [5 6]]]\n   (println (format "{%d -> %d}\\n" i j)))
1556626513057:(merge-with + {:a 1} {:b 1})
1556651014727:G
1556651098530:(def G {[0 1] 4 [0 2] 3 [0 3] 5 [2 4] 4 [3 4] 2 [1 5] 3 [5 6] 2 [6 4] 1 [4 7] 10})
1556651110864:(find-a-path G 0 10)
1556651135384:(defn find-a-path [G a b]\n  (loop [H G\n         x a\n         P []]\n    (let [ke (->> H (filter (fn [[k v]] (= (first k) x))) keys first)]\n       (cond (nil? ke) {} \n             (= b (second ke)) (let [t (cons ke P)\n                                     v (->> (map G t) (reduce min))]\n                                  (zipmap t (repeat v)))\n             :true (recur (dissoc H ke) (second ke) (cons ke P))))))
1556651139642:(find-a-path G 0 10)
1556651147806:(find-a-path G 2 10)
1556651154508:(find-a-path G 2 5)
1556651161116:G
1556651716362:(conj 2 [1 3])
1556651721486:(conj [1 3] 2)
1556652112225:(filter even? (range 10))
1556652125382:G
1556652130185:(keys G)
1556652152030:(filter #(= 0 (first %)) (keys G))
1556652188810:(filter #(= 2 (first %)) (keys G))
1556652205067:(->> (keys G) (filter #(= 2 (first %))) first)
1556652216484:(->> (keys G) (filter #(= 2 (first %))) rand-nth)
1556653905992:(defn find-a-path [G a b]\n   (loop [x a\n          P []]\n     (let [k (->> G (filter (fn [[k v]] (= x (first k)))) keys rand-nth)]\n        (cond (= b (second k)) (let [t (conj P k)\n                                     v (reduce min (map G t))]\n                                  (zipmap t (repeat v)))\n              (nil? k) {}\n              :true (recur (second k) (cons k P))))))
1556653910391:G
1556653919446:(find-a-path G 0 4)
1556653926296:(find-a-path G 0 6)
1556653933814:(find-a-path G 0 7)
1556654005490:(def random-graph (->> (range 5)\n                       (mapcat (fn [x] (repeatedly (+ 5 (rand-int 3)) \n                                                   (fn [] [x (+ x 1 (rand-int 4))]))))\n                       distinct\n                       (mapcat (fn [x] {x (+ 1 (rand-int 6))}))\n               (into {})))
1556654011097:random-graph
1556654025518:(find-a-path random-graph 0 8)
1556654030779:(find-a-path random-graph 0 4)
1556654033438:(find-a-path random-graph 0 5)
1556654036538:(find-a-path random-graph 0 1)
1556654038587:(find-a-path random-graph 0 2)
1556654192238:random-graph
1556654199406:(find-a-path random-graph 0 1)
1556654240110:(->> random-graph (filter (fn [[k v]] (= 0 (first k)))))
1556654248992:(->> random-graph (filter (fn [[k v]] (= 0 (first k)))) keys)
1556654272679:(->> random-graph (filter (fn [[k v]] (= 0 (first k)))) keys rand-nth)
1556654308629:(defn find-a-path [G a b]\n   (loop [x a\n          P []]\n     (let [k (->> G (filter (fn [[k v]] (= x (first k)))) keys rand-nth)]\n        (cond (= b (second k)) (let [t (conj P k)\n                                     v (reduce min (map G t))]\n                                  (zipmap t (repeat v)))\n              (nil? k) {}\n              :true (recur (second k) (conj P k))))))
1556654314161:(find-a-path random-graph 0 1)
1556654464682:(defn find-a-path [G a b]\n   (loop [x a\n          P []]\n     (if (= a b)\n        (zipmap P (reduce min (map G P)))\n        (let [k (->> G (filter (fn [[k v]] (= x (first k)))) keys rand-nth)]\n           (if (nil? k) \n               {}\n               (recur (second k) (conj P k)))))))
1556654468661:(find-a-path random-graph 0 1)
1556654473023:(find-a-path random-graph 0 2)
1556654475515:G
1556654500751:(defn find-a-path [G a b]\n   (loop [x a\n          P []]\n     (println "P=" P)\n     (if (= a b)\n        (zipmap P (reduce min (map G P)))\n        (let [k (->> G (filter (fn [[k v]] (= x (first k)))) keys rand-nth)]\n           (if (nil? k) \n               {}\n               (recur (second k) (conj P k)))))))
1556654504975:(find-a-path random-graph 0 2)
1556654525330:(map G [[0 4] [4 6]])
1556654531718:G
1556654539274:(G [0 4])
1556654543446:(get G [0 4])
1556654592110:(defn find-a-path [G a b]\n   (loop [x a\n          P []]\n     (println "P=" P)\n     (if (= x b)\n        (zipmap P (reduce min (map G P)))\n        (let [k (->> G (filter (fn [[k v]] (= x (first k)))) keys rand-nth)]\n           (if (nil? k) \n               {}\n               (recur (second k) (conj P k)))))))
1556654598583:(find-a-path random-graph 0 2)
1556654718048:(defn find-a-path [G a b]\n   (loop [x a\n          P []]\n     (println (format "x=%d a=%d b=%d" x a b))\n     (println "P=" P)\n     (if (= x b)\n         (zipmap P (reduce min (map G P)))\n         (let [k (->> G (filter (fn [[k v]] (= x (first k)))) keys rand-nth)]\n            (if (nil? k) \n                {}\n                (recur (second k) (conj P k)))))))
1556654721798:(find-a-path random-graph 0 2)
1556660576978:(some (fn [x] (if (even? x) x)) [1 3 5 7 9 0 2 4])
1556660585475:(some (fn [x] (if (even? x) :a)) [1 3 5 7 9 0 2 4])
1556660627316:(some (fn [x] (if (not (empty? x)))) [{} {} {} {} {} #{1}])
1556660638296:(some (fn [x] (if (not (empty? x)) x)) [{} {} {} {} {} #{1}])
1556662738824:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (cons [a (first (first P))] P)))
1556662749326:(find-a-path G 0 3)
1556662758430:(find-a-path G 0 5)
1556662777226:(find-a-path G 0 1)
1556662790451:(find-a-path G 0 3)
1556663033067:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (if P \n          (cons [a (first (first P))] P)\n          {})))
1556663036596:(find-a-path G 0 5)
1556663043800:(find-a-path G 0 1)
1556663049954:(find-a-path G 0 8)
1556663090202:(find-a-path G 1 8)
1556663103152:G
1556663117491:(find-a-path G 1 7)
1556663243540:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (if (= a b) \n          {}\n          (cons [a (first (first P))] P))))
1556663246417:(find-a-path G 1 7)
1556663311415:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (if (contains? (keys G) [a b])\n          [[a b]]\n          (cons [a (first (first P))] P))))
1556663314574:(find-a-path G 1 7)
1556663360204:(contains? [1 2 3] 3)
1556663368261:(contains? #{1 2 3} 3)
1556663383077:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (if (contains? (into #{} (keys G)) [a b])\n          [[a b]]\n          (cons [a (first (first P))] P))))
1556663387056:(find-a-path G 1 7)
1556663394620:(find-a-path G 0 7)
1556664077896:(find-a-path random-graph 0 7)
1556664083367:(find-a-path random-graph 0 5)
1556664086258:(find-a-path random-graph 1 5)
1556664089781:(find-a-path random-graph 1 8)
1556664154188:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (cond (empty? P) []\n            (contains? (into #{} (keys G)) [a b]) [[a b]]\n            :true (cons [a (first (first P))] P))))
1556664157411:(find-a-path random-graph 1 5)
1556664161187:(find-a-path random-graph 1 8)
1556664165414:(find-a-path random-graph 1 4)
1556664310043:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (cond (empty? P) {}\n            (contains? (into #{} (keys G)) [a b]) {[a b] (G [a b])}\n            :true (let [k [a (first (first P))]] (cons {k (G k)} P)))))
1556664312764:(find-a-path random-graph 1 4)
1556664322154:(find-a-path random-graph 0 5)
1556664343170:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (cond \n            (contains? (into #{} (keys G)) [a b]) {[a b] (G [a b])}\n            :true (let [k [a (first (first P))]] (cons {k (G k)} P)))))
1556664345667:(find-a-path random-graph 0 5)
1556664387209:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (cond \n            (contains? (into #{} (keys G)) [a b]) {[a b] (G [a b])}\n            :true (let [k [a (first (first (keys P)))]] (cons {k (G k)} P)))))
1556664390097:(find-a-path random-graph 0 5)
1556664417019:(defn find-a-path [G a b]\n   (let [xs (->> G (filter (fn [[k v]] (= a (first k)))) keys)\n         P  (some (fn [x] (find-a-path G (second x) b)) xs)]\n      (cond \n            (contains? (into #{} (keys G)) [a b]) {[a b] (G [a b])}\n            :true (let [k [a (first (first (keys P)))]] (cons [k (G k)] P)))))
1556664419871:(find-a-path random-graph 0 5)
1556664427084:(into {} (find-a-path random-graph 0 5))
1556664442650:(into {} (find-a-path random-graph 0 8))
1556664448035:(into {} (find-a-path random-graph 0 7))
1556664451707:(into {} (find-a-path random-graph 0 6))
1556664455820:(into {} (find-a-path random-graph 1 6))
1556668140179:(conj [1 2] [[2 3]])
1556668146614:(conj [[1 2]] [[2 3]])
1556668158655:(append [[1 2]] [[2 3]])
1556668171691:(concat [[1 2]] [[2 3]])
1556703455500:G
1556703469496:(filter (fn [[u v] k] (= u 1)) G)
1556703482111:(filter (fn [[[u v] k]] (= u 1)) G)
